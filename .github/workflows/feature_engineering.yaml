name: Feature Engineering Workflow

on:
  push:
    branches:
      - 'main'
    paths:
      - src/feature_engineering**
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  call-images-build-and-push-workflow:
    uses: ./.github/workflows/build_push_images_on_call.yaml
    secrets: inherit
  
  submit-feature-engineering-pipeline:
    needs: call-images-build-and-push-workflow
    runs-on: ubuntu-latest
    steps:
      -
        name: Install Pyenv, Python and Poetry
        run: |
          curl https://pyenv.run | bash && rm -rf /tmp/*
          echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ${HOME}/.bashrc
          echo '[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"' >> ${HOME}/.bashrc
          echo 'eval "$(pyenv init -)"' >> ${HOME}/.bashrc
          echo 'eval "$(pyenv virtualenv-init -)"' >> ${HOME}/.bashrc
          source ${HOME}/.bashrc
          pyenv install 3.10.13
          pyenv global 3.10.13
          curl -sSL https://install.python-poetry.org | python3 -
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        id: gcp_auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.3
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          workload_identity_provider: ${{ secrets.WIP }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
      -
        name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'
      -
        name: Create .env file based on Github Secrets
        run: |
          echo "ENDPOINT=${{ secrets.ENDPOINT }}" >> .env
          echo "HOPSWORKS_API_KEY=${{ secrets.HOPSWORKS_API_KEY }}" >> .env
          echo "HOPSWORKS_PROJECT=${{ secrets.HOPSWORKS_PROJECT }}" >> .env
          echo "IMAGE=${{ secrets.ARTIFACT_REGISTRY_TAG }}" >> .env
          echo "PIPELINE_ROOT=${{ secrets.PIPELINE_ROOT }}" >> .env
          echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> .env
          echo "RAW_DATA=${{ secrets.RAW_DATA }}" >> .env
          echo "REGION=${{ secrets.REGION }}" >> .env
      -
        name: Create venv and install requirements
        run: |
          pyenv virtualenv 3.10.13 asrs
          pyenv activate asrs
          poetry install --without dev --no-root
          pyenv global asrs
      -
        name: Submit Pipeline
        run: |
          gcloud auth login --brief --cred-file="${{ steps.gcp_auth.outputs.credentials_file_path }}"
          python3 src/feature_engineering/pipeline.py
