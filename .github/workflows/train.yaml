name: Train Workflow

on:
  push:
    branches:
      - 'main'
    paths:
      - src/evl**
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  call-images-build-and-push-workflow:
    uses: ./.github/workflows/build_push_images_on_call.yaml
    secrets: inherit

  submit-train-pipeline:
    needs: call-images-build-and-push-workflow
    runs-on: ubuntu-latest
    steps:
      -
        name: Setup pyenv
        uses: "gabrielfalcao/pyenv-action@v18"
        with:
          default: 3.10.13
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        id: gcp_auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.3
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          workload_identity_provider: ${{ secrets.WIP }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
      -
        name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'
      -
        name: Create .env file based on Github Secrets
        run: |
          echo "AIP_TENSORBOARD_LOG_DIR=${{ secrets.AIP_TENSORBOARD_LOG_DIR }}" >> .env
          echo "ENDPOINT=${{ secrets.ENDPOINT }}" >> .env
          echo "HOPSWORKS_API_KEY=${{ secrets.HOPSWORKS_API_KEY }}" >> .env
          echo "HOPSWORKS_PROJECT=${{ secrets.HOPSWORKS_PROJECT }}" >> .env
          echo "GPU_IMAGE=${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ vars.IMAGE }}:gpu"
          echo "IMAGE=${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ vars.IMAGE }}:cpu" >> .env
          echo "PIPELINE_ROOT=${{ secrets.PIPELINE_ROOT }}" >> .env
          echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> .env
          echo "RAW_DATA=${{ secrets.RAW_DATA }}" >> .env
          echo "REGION=${{ secrets.REGION }}" >> .env
      -
        name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
      -
        name: Create venv and install requirements
        run: |
          python3 -m venv env && source env/bin/activate
          poetry install --without dev
      -
        name: Submit Pipeline
        run: |
          source env/bin/activate
          python3 src/train/pipeline.py ${{ vars.MLPLATFORM }}